// <auto-generated />
using System;
using MedicalAppointmentAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalAppointmentAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250206153419_AddSuperAdmin")]
    partial class AddSuperAdmin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalAppointmentAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasFilter("[RefreshToken] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MedicalAppointmentAPI.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Qualifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "75fee9bc-b2ef-4109-a84c-2d007eb51318",
                            ConcurrencyStamp = "6e93ab24-d88e-46d5-8902-be080fe8bd41",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "66403eab-c533-4c94-82cd-4858f6c68b55",
                            ConcurrencyStamp = "96787274-682b-4830-9bbc-24248340d5ca",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c4dd9744-755c-46ad-a349-07be56bee330",
                            ConcurrencyStamp = "6d46f210-fd3c-4f8e-93ae-cd055259429e",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "430365f2-3597-4c54-9355-1bc1cc410f15",
                            ConcurrencyStamp = "ce21096d-7454-42c9-8997-99166fdbbea0",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = "4a7ab4e6-6cfc-411b-b0a3-253afd6a1642",
                            ConcurrencyStamp = "338a7365-39cd-40bb-b063-dea87f3273db",
                            Name = "Receptionist",
                            NormalizedName = "RECEPTIONIST"
                        },
                        new
                        {
                            Id = "ad57d966-8473-491b-9779-dd62c42378b3",
                            ConcurrencyStamp = "f87ede81-d533-4032-a83f-9e1d5e063482",
                            Name = "Pharmacist",
                            NormalizedName = "PHARMACIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppointmentStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Symptoms")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentDate");

                    b.HasIndex("AppointmentStatusId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("DoctorScheduleId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Models.AppointmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppointmentStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(4493),
                            Description = "Trạng thái đã đặt lịch",
                            IsActive = true,
                            Name = "Đã đặt lịch",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(4493)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(4496),
                            Description = "Trạng thái đã được xác nhận",
                            IsActive = true,
                            Name = "Đã xác nhận",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(4496)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(4498),
                            Description = "Trạng thái đã hoàn thành",
                            IsActive = true,
                            Name = "Đã hoàn thành",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(4498)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(4499),
                            Description = "Trạng thái đã hủy bỏ",
                            IsActive = true,
                            Name = "Hủy bỏ",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(4500)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(4501),
                            Description = "Trạng thái không đúng hẹn",
                            IsActive = true,
                            Name = "Không đúng hẹn",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(4502)
                        });
                });

            modelBuilder.Entity("Models.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clinics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Nguyễn Văn Linh, Quận 7, TP.HCM",
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(1750),
                            Description = "Phòng khám đa khoa với đội ngũ bác sĩ chuyên môn cao và trang thiết bị hiện đại",
                            Email = "contact@qte-clinic.com",
                            ImageUrl = "https://example.com/images/clinic1.jpg",
                            IsActive = true,
                            Name = "Phòng Khám Đa Khoa Quốc Tế",
                            OpeningHours = "7:00 - 20:00",
                            Phone = "028.7123.4567",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(1751),
                            Website = "https://qte-clinic.com"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Lê Văn Việt, Quận 9, TP.HCM",
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(1755),
                            Description = "Chuyên khoa sản phụ khoa với các dịch vụ chăm sóc toàn diện cho phụ nữ",
                            Email = "info@hanhphuc-clinic.com",
                            ImageUrl = "https://example.com/images/clinic2.jpg",
                            IsActive = true,
                            Name = "Phòng Khám Sản Phụ Khoa Hạnh Phúc",
                            OpeningHours = "7:30 - 19:30",
                            Phone = "028.7234.5678",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(1755),
                            Website = "https://hanhphuc-clinic.com"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Phan Văn Trị, Quận Gò Vấp, TP.HCM",
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(1758),
                            Description = "Phòng khám chuyên khoa nhi với môi trường thân thiện cho trẻ em",
                            Email = "care@kids-clinic.com",
                            ImageUrl = "https://example.com/images/clinic3.jpg",
                            IsActive = true,
                            Name = "Phòng Khám Nhi Thiên Thần Nhỏ",
                            OpeningHours = "7:00 - 19:00",
                            Phone = "028.7345.6789",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(1758),
                            Website = "https://kids-clinic.com"
                        },
                        new
                        {
                            Id = 4,
                            Address = "321 Võ Văn Ngân, TP.Thủ Đức, TP.HCM",
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(1760),
                            Description = "Chuyên khoa tim mạch với các trang thiết bị chẩn đoán hiện đại",
                            Email = "info@tamduc-cardio.com",
                            ImageUrl = "https://example.com/images/clinic4.jpg",
                            IsActive = true,
                            Name = "Phòng Khám Tim Mạch Tâm Đức",
                            OpeningHours = "8:00 - 17:00",
                            Phone = "028.7456.7890",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(1760),
                            Website = "https://tamduc-cardio.com"
                        },
                        new
                        {
                            Id = 5,
                            Address = "147 Điện Biên Phủ, Quận Bình Thạnh, TP.HCM",
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(1762),
                            Description = "Chuyên khoa mắt với các dịch vụ khám và điều trị về mắt",
                            Email = "care@anhsang-eye.com",
                            ImageUrl = "https://example.com/images/clinic5.jpg",
                            IsActive = true,
                            Name = "Phòng Khám Mắt Ánh Sáng",
                            OpeningHours = "7:30 - 17:00",
                            Phone = "028.7567.8901",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(1763),
                            Website = "https://anhsang-eye.com"
                        },
                        new
                        {
                            Id = 6,
                            Address = "258 Cao Thắng, Quận 3, TP.HCM",
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(1765),
                            Description = "Chăm sóc răng miệng toàn diện với công nghệ nha khoa tiên tiến",
                            Email = "info@nucuoi-dental.com",
                            ImageUrl = "https://example.com/images/clinic6.jpg",
                            IsActive = true,
                            Name = "Phòng Khám Răng Hàm Mặt Nụ Cười",
                            OpeningHours = "8:00 - 20:00",
                            Phone = "028.7678.9012",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(1765),
                            Website = "https://nucuoi-dental.com"
                        },
                        new
                        {
                            Id = 7,
                            Address = "369 Nguyễn Thị Minh Khai, Quận 1, TP.HCM",
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(1767),
                            Description = "Phòng khám đa khoa với đầy đủ các chuyên khoa",
                            Email = "contact@suckhoe-clinic.com",
                            ImageUrl = "https://example.com/images/clinic7.jpg",
                            IsActive = true,
                            Name = "Phòng Khám Đa Khoa Sức Khỏe",
                            OpeningHours = "7:00 - 21:00",
                            Phone = "028.7789.0123",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(1767),
                            Website = "https://suckhoe-clinic.com"
                        },
                        new
                        {
                            Id = 8,
                            Address = "486 Lê Quang Định, Quận Bình Thạnh, TP.HCM",
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(1769),
                            Description = "Chuyên điều trị các bệnh lý về cơ xương khớp",
                            Email = "info@vandong-clinic.com",
                            ImageUrl = "https://example.com/images/clinic8.jpg",
                            IsActive = true,
                            Name = "Phòng Khám Cơ Xương Khớp Vận Động",
                            OpeningHours = "8:00 - 17:30",
                            Phone = "028.7890.1234",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 461, DateTimeKind.Utc).AddTicks(1770),
                            Website = "https://vandong-clinic.com"
                        });
                });

            modelBuilder.Entity("Models.DoctorSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AverageConsultingTime")
                        .HasColumnType("int");

                    b.Property<int>("BreakTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("MaxAppointments")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeekDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeekDayId");

                    b.HasIndex("DoctorId", "WeekDayId", "StartTime", "EndTime")
                        .IsUnique();

                    b.ToTable("DoctorSchedules", t =>
                        {
                            t.HasCheckConstraint("CK_DoctorSchedule_TimeRange", "StartTime < EndTime");
                        });
                });

            modelBuilder.Entity("Models.MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("ConsultationFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFollowUpRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Prescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TestResults")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChronicDiseases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InsuranceExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InsuranceProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceNumber");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Models.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("GeneralInstructions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PrescriptionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Models.PrescriptionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionDetails");
                });

            modelBuilder.Entity("Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("Specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6508),
                            Description = "Khám và điều trị các bệnh lý nội khoa tổng quát",
                            IsActive = true,
                            Name = "Nội Tổng Quát",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6508)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6731),
                            Description = "Chẩn đoán và điều trị các bệnh về tim mạch",
                            IsActive = true,
                            Name = "Tim Mạch",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6731)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6733),
                            Description = "Khám và điều trị các bệnh về hệ thần kinh",
                            IsActive = true,
                            Name = "Thần Kinh",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6733)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6735),
                            Description = "Chăm sóc sức khỏe trẻ em từ sơ sinh đến 15 tuổi",
                            IsActive = true,
                            Name = "Nhi Khoa",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6735)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6737),
                            Description = "Chăm sóc sức khỏe phụ nữ và thai sản",
                            IsActive = true,
                            Name = "Sản Phụ Khoa",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6737)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6738),
                            Description = "Khám và điều trị các bệnh về tai, mũi, họng",
                            IsActive = true,
                            Name = "Tai Mũi Họng",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6739)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6740),
                            Description = "Khám và điều trị các bệnh về mắt",
                            IsActive = true,
                            Name = "Mắt",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6740)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6741),
                            Description = "Khám và điều trị các bệnh về da",
                            IsActive = true,
                            Name = "Da Liễu",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6742)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6755),
                            Description = "Khám và điều trị các bệnh về xương khớp",
                            IsActive = true,
                            Name = "Cơ Xương Khớp",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6755)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6756),
                            Description = "Khám và điều trị các bệnh về đường tiêu hóa",
                            IsActive = true,
                            Name = "Tiêu Hóa",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6757)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6758),
                            Description = "Khám và điều trị các bệnh về đường hô hấp",
                            IsActive = true,
                            Name = "Hô Hấp",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6758)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6759),
                            Description = "Khám và điều trị các bệnh về nội tiết, đái tháo đường",
                            IsActive = true,
                            Name = "Nội Tiết",
                            UpdatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 460, DateTimeKind.Utc).AddTicks(6760)
                        });
                });

            modelBuilder.Entity("Models.WeekDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWeekend")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ViName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("WeekDays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 459, DateTimeKind.Utc).AddTicks(8318),
                            IsActive = true,
                            IsWeekend = false,
                            Name = "Monday",
                            ShortName = "Mon",
                            ViName = "Thứ Hai"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 459, DateTimeKind.Utc).AddTicks(8422),
                            IsActive = true,
                            IsWeekend = false,
                            Name = "Tuesday",
                            ShortName = "Tue",
                            ViName = "Thứ Ba"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 459, DateTimeKind.Utc).AddTicks(8423),
                            IsActive = true,
                            IsWeekend = false,
                            Name = "Wednesday",
                            ShortName = "Wed",
                            ViName = "Thứ Tư"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 459, DateTimeKind.Utc).AddTicks(8425),
                            IsActive = true,
                            IsWeekend = false,
                            Name = "Thursday",
                            ShortName = "Thu",
                            ViName = "Thứ Năm"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 459, DateTimeKind.Utc).AddTicks(8426),
                            IsActive = true,
                            IsWeekend = false,
                            Name = "Friday",
                            ShortName = "Fri",
                            ViName = "Thứ Sáu"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 459, DateTimeKind.Utc).AddTicks(8427),
                            IsActive = true,
                            IsWeekend = true,
                            Name = "Saturday",
                            ShortName = "Sat",
                            ViName = "Thứ Bảy"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 2, 6, 15, 34, 19, 459, DateTimeKind.Utc).AddTicks(8429),
                            IsActive = true,
                            IsWeekend = true,
                            Name = "Sunday",
                            ShortName = "Sun",
                            ViName = "Chủ Nhật"
                        });
                });

            modelBuilder.Entity("MedicalAppointmentAPI.Models.Doctor", b =>
                {
                    b.HasOne("Models.Clinic", "Clinic")
                        .WithMany("Doctors")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Specialty", "Specialty")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalAppointmentAPI.Models.ApplicationUser", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("MedicalAppointmentAPI.Models.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Specialty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MedicalAppointmentAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MedicalAppointmentAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalAppointmentAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MedicalAppointmentAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Appointment", b =>
                {
                    b.HasOne("Models.AppointmentStatus", "AppointmentStatus")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalAppointmentAPI.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.DoctorSchedule", null)
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorScheduleId");

                    b.HasOne("Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppointmentStatus");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Models.DoctorSchedule", b =>
                {
                    b.HasOne("MedicalAppointmentAPI.Models.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.WeekDay", "WeekDay")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("WeekDayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("WeekDay");
                });

            modelBuilder.Entity("Models.MedicalRecord", b =>
                {
                    b.HasOne("Models.Appointment", "Appointment")
                        .WithOne()
                        .HasForeignKey("Models.MedicalRecord", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalAppointmentAPI.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Models.Patient", b =>
                {
                    b.HasOne("MedicalAppointmentAPI.Models.ApplicationUser", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Models.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Prescription", b =>
                {
                    b.HasOne("MedicalAppointmentAPI.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.MedicalRecord", "MedicalRecord")
                        .WithMany()
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MedicalRecord");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Models.PrescriptionDetail", b =>
                {
                    b.HasOne("Models.Prescription", "Prescription")
                        .WithMany("Details")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Models.Specialty", b =>
                {
                    b.HasOne("Models.Clinic", null)
                        .WithMany("Specialties")
                        .HasForeignKey("ClinicId");
                });

            modelBuilder.Entity("MedicalAppointmentAPI.Models.ApplicationUser", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalAppointmentAPI.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Models.AppointmentStatus", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Models.Clinic", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Specialties");
                });

            modelBuilder.Entity("Models.DoctorSchedule", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("Models.Prescription", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Models.Specialty", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Models.WeekDay", b =>
                {
                    b.Navigation("DoctorSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
